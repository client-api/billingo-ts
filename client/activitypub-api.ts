/* tslint:disable */
/* eslint-disable */
/**
 * Forgejo API.
 * This documentation describes the Forgejo API.
 *
 * The version of the OpenAPI document: 1.20.5+0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ActivityPub } from '../models';
/**
 * ActivitypubApi - axios parameter creator
 * @export
 */
export const ActivitypubApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the Person actor for a user
         * @param {number} userId user ID of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitypubPerson: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('activitypubPerson', 'userId', userId)
            const localVarPath = `/activitypub/user-id/{user-id}`
                .replace(`{${"user-id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-FORGEJO-OTP", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send to the inbox
         * @param {number} userId user ID of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitypubPersonInbox: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('activitypubPersonInbox', 'userId', userId)
            const localVarPath = `/activitypub/user-id/{user-id}/inbox`
                .replace(`{${"user-id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-FORGEJO-OTP", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActivitypubApi - functional programming interface
 * @export
 */
export const ActivitypubApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActivitypubApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the Person actor for a user
         * @param {number} userId user ID of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activitypubPerson(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivityPub>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activitypubPerson(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send to the inbox
         * @param {number} userId user ID of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activitypubPersonInbox(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activitypubPersonInbox(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ActivitypubApi - factory interface
 * @export
 */
export const ActivitypubApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActivitypubApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the Person actor for a user
         * @param {number} userId user ID of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitypubPerson(userId: number, options?: any): AxiosPromise<ActivityPub> {
            return localVarFp.activitypubPerson(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send to the inbox
         * @param {number} userId user ID of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitypubPersonInbox(userId: number, options?: any): AxiosPromise<void> {
            return localVarFp.activitypubPersonInbox(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActivitypubApi - interface
 * @export
 * @interface ActivitypubApi
 */
export interface ActivitypubApiInterface {
    /**
     * 
     * @summary Returns the Person actor for a user
     * @param {number} userId user ID of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitypubApiInterface
     */
    activitypubPerson(userId: number, options?: AxiosRequestConfig): AxiosPromise<ActivityPub>;

    /**
     * 
     * @summary Send to the inbox
     * @param {number} userId user ID of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitypubApiInterface
     */
    activitypubPersonInbox(userId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ActivitypubApi - object-oriented interface
 * @export
 * @class ActivitypubApi
 * @extends {BaseAPI}
 */
export class ActivitypubApi extends BaseAPI implements ActivitypubApiInterface {
    /**
     * 
     * @summary Returns the Person actor for a user
     * @param {number} userId user ID of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitypubApi
     */
    public activitypubPerson(userId: number, options?: AxiosRequestConfig) {
        return ActivitypubApiFp(this.configuration).activitypubPerson(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send to the inbox
     * @param {number} userId user ID of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitypubApi
     */
    public activitypubPersonInbox(userId: number, options?: AxiosRequestConfig) {
        return ActivitypubApiFp(this.configuration).activitypubPersonInbox(userId, options).then((request) => request(this.axios, this.basePath));
    }
}

