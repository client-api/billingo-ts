/* tslint:disable */
/* eslint-disable */
/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Category } from '../models';
// @ts-ignore
import { ClientErrorResponse } from '../models';
// @ts-ignore
import { Currency } from '../models';
// @ts-ignore
import { DateType } from '../models';
// @ts-ignore
import { PaymentMethod } from '../models';
// @ts-ignore
import { PaymentStatusSpending } from '../models';
// @ts-ignore
import { ServerErrorResponse } from '../models';
// @ts-ignore
import { Source } from '../models';
// @ts-ignore
import { Spending } from '../models';
// @ts-ignore
import { SpendingList } from '../models';
// @ts-ignore
import { SpendingSave } from '../models';
// @ts-ignore
import { SubscriptionErrorResponse } from '../models';
// @ts-ignore
import { TooManyRequestsResponse } from '../models';
// @ts-ignore
import { ValidationErrorResponse } from '../models';
/**
 * SpendingApi - axios parameter creator
 * @export
 */
export const SpendingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes the spending identified by the ID given in path.
         * @summary Deletes a spending.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendingDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('spendingDelete', 'id', id)
            const localVarPath = `/spendings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of your spending items, ordered by the due date.
         * @summary Lists all spending
         * @param {string} [q] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {DateType} [spendingDate] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {PaymentStatusSpending} [paymentStatus] 
         * @param {Source} [spendingType] 
         * @param {Category} [categories] 
         * @param {Currency} [currencies] 
         * @param {PaymentMethod} [paymentMethods] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendingList: async (q?: string, page?: number, perPage?: number, spendingDate?: DateType, startDate?: string, endDate?: string, paymentStatus?: PaymentStatusSpending, spendingType?: Source, categories?: Category, currencies?: Currency, paymentMethods?: PaymentMethod, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/spendings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (spendingDate !== undefined) {
                localVarQueryParameter['spending_date'] = spendingDate;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (paymentStatus !== undefined) {
                localVarQueryParameter['payment_status'] = paymentStatus;
            }

            if (spendingType !== undefined) {
                localVarQueryParameter['spending_type'] = spendingType;
            }

            if (categories !== undefined) {
                localVarQueryParameter['categories'] = categories;
            }

            if (currencies !== undefined) {
                localVarQueryParameter['currencies'] = currencies;
            }

            if (paymentMethods !== undefined) {
                localVarQueryParameter['payment_methods'] = paymentMethods;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new spending.
         * @param {SpendingSave} [spendingSave] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendingSave: async (spendingSave?: SpendingSave, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/spendings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spendingSave, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrives the spending identified by the given ID in path.
         * @summary Retrieves one specific spending.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendingShow: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('spendingShow', 'id', id)
            const localVarPath = `/spendings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the spending item identified by the ID given in path.
         * @summary Updates a spending item.
         * @param {number} id 
         * @param {SpendingSave} [spendingSave] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendingUpdate: async (id: number, spendingSave?: SpendingSave, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('spendingUpdate', 'id', id)
            const localVarPath = `/spendings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spendingSave, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpendingApi - functional programming interface
 * @export
 */
export const SpendingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpendingApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes the spending identified by the ID given in path.
         * @summary Deletes a spending.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spendingDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spendingDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of your spending items, ordered by the due date.
         * @summary Lists all spending
         * @param {string} [q] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {DateType} [spendingDate] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {PaymentStatusSpending} [paymentStatus] 
         * @param {Source} [spendingType] 
         * @param {Category} [categories] 
         * @param {Currency} [currencies] 
         * @param {PaymentMethod} [paymentMethods] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spendingList(q?: string, page?: number, perPage?: number, spendingDate?: DateType, startDate?: string, endDate?: string, paymentStatus?: PaymentStatusSpending, spendingType?: Source, categories?: Category, currencies?: Currency, paymentMethods?: PaymentMethod, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpendingList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spendingList(q, page, perPage, spendingDate, startDate, endDate, paymentStatus, spendingType, categories, currencies, paymentMethods, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new spending.
         * @param {SpendingSave} [spendingSave] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spendingSave(spendingSave?: SpendingSave, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Spending>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spendingSave(spendingSave, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrives the spending identified by the given ID in path.
         * @summary Retrieves one specific spending.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spendingShow(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Spending>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spendingShow(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the spending item identified by the ID given in path.
         * @summary Updates a spending item.
         * @param {number} id 
         * @param {SpendingSave} [spendingSave] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spendingUpdate(id: number, spendingSave?: SpendingSave, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Spending>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spendingUpdate(id, spendingSave, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SpendingApi - factory interface
 * @export
 */
export const SpendingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpendingApiFp(configuration)
    return {
        /**
         * Deletes the spending identified by the ID given in path.
         * @summary Deletes a spending.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendingDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.spendingDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of your spending items, ordered by the due date.
         * @summary Lists all spending
         * @param {string} [q] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {DateType} [spendingDate] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {PaymentStatusSpending} [paymentStatus] 
         * @param {Source} [spendingType] 
         * @param {Category} [categories] 
         * @param {Currency} [currencies] 
         * @param {PaymentMethod} [paymentMethods] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendingList(q?: string, page?: number, perPage?: number, spendingDate?: DateType, startDate?: string, endDate?: string, paymentStatus?: PaymentStatusSpending, spendingType?: Source, categories?: Category, currencies?: Currency, paymentMethods?: PaymentMethod, options?: any): AxiosPromise<SpendingList> {
            return localVarFp.spendingList(q, page, perPage, spendingDate, startDate, endDate, paymentStatus, spendingType, categories, currencies, paymentMethods, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new spending.
         * @param {SpendingSave} [spendingSave] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendingSave(spendingSave?: SpendingSave, options?: any): AxiosPromise<Spending> {
            return localVarFp.spendingSave(spendingSave, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrives the spending identified by the given ID in path.
         * @summary Retrieves one specific spending.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendingShow(id: number, options?: any): AxiosPromise<Spending> {
            return localVarFp.spendingShow(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the spending item identified by the ID given in path.
         * @summary Updates a spending item.
         * @param {number} id 
         * @param {SpendingSave} [spendingSave] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendingUpdate(id: number, spendingSave?: SpendingSave, options?: any): AxiosPromise<Spending> {
            return localVarFp.spendingUpdate(id, spendingSave, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpendingApi - interface
 * @export
 * @interface SpendingApi
 */
export interface SpendingApiInterface {
    /**
     * Deletes the spending identified by the ID given in path.
     * @summary Deletes a spending.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpendingApiInterface
     */
    spendingDelete(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Returns a list of your spending items, ordered by the due date.
     * @summary Lists all spending
     * @param {string} [q] 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {DateType} [spendingDate] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {PaymentStatusSpending} [paymentStatus] 
     * @param {Source} [spendingType] 
     * @param {Category} [categories] 
     * @param {Currency} [currencies] 
     * @param {PaymentMethod} [paymentMethods] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpendingApiInterface
     */
    spendingList(q?: string, page?: number, perPage?: number, spendingDate?: DateType, startDate?: string, endDate?: string, paymentStatus?: PaymentStatusSpending, spendingType?: Source, categories?: Category, currencies?: Currency, paymentMethods?: PaymentMethod, options?: AxiosRequestConfig): AxiosPromise<SpendingList>;

    /**
     * 
     * @summary Creates a new spending.
     * @param {SpendingSave} [spendingSave] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpendingApiInterface
     */
    spendingSave(spendingSave?: SpendingSave, options?: AxiosRequestConfig): AxiosPromise<Spending>;

    /**
     * Retrives the spending identified by the given ID in path.
     * @summary Retrieves one specific spending.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpendingApiInterface
     */
    spendingShow(id: number, options?: AxiosRequestConfig): AxiosPromise<Spending>;

    /**
     * Updates the spending item identified by the ID given in path.
     * @summary Updates a spending item.
     * @param {number} id 
     * @param {SpendingSave} [spendingSave] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpendingApiInterface
     */
    spendingUpdate(id: number, spendingSave?: SpendingSave, options?: AxiosRequestConfig): AxiosPromise<Spending>;

}

/**
 * SpendingApi - object-oriented interface
 * @export
 * @class SpendingApi
 * @extends {BaseAPI}
 */
export class SpendingApi extends BaseAPI implements SpendingApiInterface {
    /**
     * Deletes the spending identified by the ID given in path.
     * @summary Deletes a spending.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpendingApi
     */
    public spendingDelete(id: number, options?: AxiosRequestConfig) {
        return SpendingApiFp(this.configuration).spendingDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of your spending items, ordered by the due date.
     * @summary Lists all spending
     * @param {string} [q] 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {DateType} [spendingDate] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {PaymentStatusSpending} [paymentStatus] 
     * @param {Source} [spendingType] 
     * @param {Category} [categories] 
     * @param {Currency} [currencies] 
     * @param {PaymentMethod} [paymentMethods] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpendingApi
     */
    public spendingList(q?: string, page?: number, perPage?: number, spendingDate?: DateType, startDate?: string, endDate?: string, paymentStatus?: PaymentStatusSpending, spendingType?: Source, categories?: Category, currencies?: Currency, paymentMethods?: PaymentMethod, options?: AxiosRequestConfig) {
        return SpendingApiFp(this.configuration).spendingList(q, page, perPage, spendingDate, startDate, endDate, paymentStatus, spendingType, categories, currencies, paymentMethods, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new spending.
     * @param {SpendingSave} [spendingSave] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpendingApi
     */
    public spendingSave(spendingSave?: SpendingSave, options?: AxiosRequestConfig) {
        return SpendingApiFp(this.configuration).spendingSave(spendingSave, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrives the spending identified by the given ID in path.
     * @summary Retrieves one specific spending.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpendingApi
     */
    public spendingShow(id: number, options?: AxiosRequestConfig) {
        return SpendingApiFp(this.configuration).spendingShow(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the spending item identified by the ID given in path.
     * @summary Updates a spending item.
     * @param {number} id 
     * @param {SpendingSave} [spendingSave] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpendingApi
     */
    public spendingUpdate(id: number, spendingSave?: SpendingSave, options?: AxiosRequestConfig) {
        return SpendingApiFp(this.configuration).spendingUpdate(id, spendingSave, options).then((request) => request(this.axios, this.basePath));
    }
}

