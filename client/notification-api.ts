/* tslint:disable */
/* eslint-disable */
/**
 * Forgejo API.
 * This documentation describes the Forgejo API.
 *
 * The version of the OpenAPI document: 1.20.5+0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { NotificationCount } from '../models';
// @ts-ignore
import { NotificationThread } from '../models';
/**
 * NotificationApi - axios parameter creator
 * @export
 */
export const NotificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List users\'s notification threads
         * @param {boolean} [all] If true, show notifications marked as read. Default value is false
         * @param {Array<string>} [statusTypes] Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned.
         * @param {Array<NotifyGetListSubjectTypeEnum>} [subjectType] filter notifications by subject type
         * @param {string} [since] Only show notifications updated after the given time. This is a timestamp in RFC 3339 format
         * @param {string} [before] Only show notifications updated before the given time. This is a timestamp in RFC 3339 format
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyGetList: async (all?: boolean, statusTypes?: Array<string>, subjectType?: Array<NotifyGetListSubjectTypeEnum>, since?: string, before?: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-FORGEJO-OTP", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }

            if (statusTypes) {
                localVarQueryParameter['status-types'] = statusTypes;
            }

            if (subjectType) {
                localVarQueryParameter['subject-type'] = subjectType;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = (since as any instanceof Date) ?
                    (since as any).toISOString() :
                    since;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = (before as any instanceof Date) ?
                    (before as any).toISOString() :
                    before;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List users\'s notification threads on a specific repo
         * @param {string} owner owner of the repo
         * @param {string} repo name of the repo
         * @param {boolean} [all] If true, show notifications marked as read. Default value is false
         * @param {Array<string>} [statusTypes] Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned
         * @param {Array<NotifyGetRepoListSubjectTypeEnum>} [subjectType] filter notifications by subject type
         * @param {string} [since] Only show notifications updated after the given time. This is a timestamp in RFC 3339 format
         * @param {string} [before] Only show notifications updated before the given time. This is a timestamp in RFC 3339 format
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyGetRepoList: async (owner: string, repo: string, all?: boolean, statusTypes?: Array<string>, subjectType?: Array<NotifyGetRepoListSubjectTypeEnum>, since?: string, before?: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('notifyGetRepoList', 'owner', owner)
            // verify required parameter 'repo' is not null or undefined
            assertParamExists('notifyGetRepoList', 'repo', repo)
            const localVarPath = `/repos/{owner}/{repo}/notifications`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-FORGEJO-OTP", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }

            if (statusTypes) {
                localVarQueryParameter['status-types'] = statusTypes;
            }

            if (subjectType) {
                localVarQueryParameter['subject-type'] = subjectType;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = (since as any instanceof Date) ?
                    (since as any).toISOString() :
                    since;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = (before as any instanceof Date) ?
                    (before as any).toISOString() :
                    before;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get notification thread by ID
         * @param {string} id id of notification thread
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyGetThread: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notifyGetThread', 'id', id)
            const localVarPath = `/notifications/threads/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-FORGEJO-OTP", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check if unread notifications exist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyNewAvailable: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/new`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-FORGEJO-OTP", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark notification threads as read, pinned or unread
         * @param {string} [lastReadAt] Describes the last point that notifications were checked. Anything updated since this time will not be updated.
         * @param {string} [all] If true, mark all notifications on this repo. Default value is false
         * @param {Array<string>} [statusTypes] Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.
         * @param {string} [toStatus] Status to mark notifications as, Defaults to read.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyReadList: async (lastReadAt?: string, all?: string, statusTypes?: Array<string>, toStatus?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-FORGEJO-OTP", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (lastReadAt !== undefined) {
                localVarQueryParameter['last_read_at'] = (lastReadAt as any instanceof Date) ?
                    (lastReadAt as any).toISOString() :
                    lastReadAt;
            }

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }

            if (statusTypes) {
                localVarQueryParameter['status-types'] = statusTypes;
            }

            if (toStatus !== undefined) {
                localVarQueryParameter['to-status'] = toStatus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark notification threads as read, pinned or unread on a specific repo
         * @param {string} owner owner of the repo
         * @param {string} repo name of the repo
         * @param {string} [all] If true, mark all notifications on this repo. Default value is false
         * @param {Array<string>} [statusTypes] Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.
         * @param {string} [toStatus] Status to mark notifications as. Defaults to read.
         * @param {string} [lastReadAt] Describes the last point that notifications were checked. Anything updated since this time will not be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyReadRepoList: async (owner: string, repo: string, all?: string, statusTypes?: Array<string>, toStatus?: string, lastReadAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('notifyReadRepoList', 'owner', owner)
            // verify required parameter 'repo' is not null or undefined
            assertParamExists('notifyReadRepoList', 'repo', repo)
            const localVarPath = `/repos/{owner}/{repo}/notifications`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-FORGEJO-OTP", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }

            if (statusTypes) {
                localVarQueryParameter['status-types'] = statusTypes;
            }

            if (toStatus !== undefined) {
                localVarQueryParameter['to-status'] = toStatus;
            }

            if (lastReadAt !== undefined) {
                localVarQueryParameter['last_read_at'] = (lastReadAt as any instanceof Date) ?
                    (lastReadAt as any).toISOString() :
                    lastReadAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark notification thread as read by ID
         * @param {string} id id of notification thread
         * @param {string} [toStatus] Status to mark notifications as
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyReadThread: async (id: string, toStatus?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notifyReadThread', 'id', id)
            const localVarPath = `/notifications/threads/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-FORGEJO-OTP", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (toStatus !== undefined) {
                localVarQueryParameter['to-status'] = toStatus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List users\'s notification threads
         * @param {boolean} [all] If true, show notifications marked as read. Default value is false
         * @param {Array<string>} [statusTypes] Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned.
         * @param {Array<NotifyGetListSubjectTypeEnum>} [subjectType] filter notifications by subject type
         * @param {string} [since] Only show notifications updated after the given time. This is a timestamp in RFC 3339 format
         * @param {string} [before] Only show notifications updated before the given time. This is a timestamp in RFC 3339 format
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyGetList(all?: boolean, statusTypes?: Array<string>, subjectType?: Array<NotifyGetListSubjectTypeEnum>, since?: string, before?: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NotificationThread>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyGetList(all, statusTypes, subjectType, since, before, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List users\'s notification threads on a specific repo
         * @param {string} owner owner of the repo
         * @param {string} repo name of the repo
         * @param {boolean} [all] If true, show notifications marked as read. Default value is false
         * @param {Array<string>} [statusTypes] Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned
         * @param {Array<NotifyGetRepoListSubjectTypeEnum>} [subjectType] filter notifications by subject type
         * @param {string} [since] Only show notifications updated after the given time. This is a timestamp in RFC 3339 format
         * @param {string} [before] Only show notifications updated before the given time. This is a timestamp in RFC 3339 format
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyGetRepoList(owner: string, repo: string, all?: boolean, statusTypes?: Array<string>, subjectType?: Array<NotifyGetRepoListSubjectTypeEnum>, since?: string, before?: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NotificationThread>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyGetRepoList(owner, repo, all, statusTypes, subjectType, since, before, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get notification thread by ID
         * @param {string} id id of notification thread
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyGetThread(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationThread>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyGetThread(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Check if unread notifications exist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyNewAvailable(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyNewAvailable(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Mark notification threads as read, pinned or unread
         * @param {string} [lastReadAt] Describes the last point that notifications were checked. Anything updated since this time will not be updated.
         * @param {string} [all] If true, mark all notifications on this repo. Default value is false
         * @param {Array<string>} [statusTypes] Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.
         * @param {string} [toStatus] Status to mark notifications as, Defaults to read.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyReadList(lastReadAt?: string, all?: string, statusTypes?: Array<string>, toStatus?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NotificationThread>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyReadList(lastReadAt, all, statusTypes, toStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Mark notification threads as read, pinned or unread on a specific repo
         * @param {string} owner owner of the repo
         * @param {string} repo name of the repo
         * @param {string} [all] If true, mark all notifications on this repo. Default value is false
         * @param {Array<string>} [statusTypes] Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.
         * @param {string} [toStatus] Status to mark notifications as. Defaults to read.
         * @param {string} [lastReadAt] Describes the last point that notifications were checked. Anything updated since this time will not be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyReadRepoList(owner: string, repo: string, all?: string, statusTypes?: Array<string>, toStatus?: string, lastReadAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NotificationThread>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyReadRepoList(owner, repo, all, statusTypes, toStatus, lastReadAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Mark notification thread as read by ID
         * @param {string} id id of notification thread
         * @param {string} [toStatus] Status to mark notifications as
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyReadThread(id: string, toStatus?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationThread>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyReadThread(id, toStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationApiFp(configuration)
    return {
        /**
         * 
         * @summary List users\'s notification threads
         * @param {boolean} [all] If true, show notifications marked as read. Default value is false
         * @param {Array<string>} [statusTypes] Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned.
         * @param {Array<NotifyGetListSubjectTypeEnum>} [subjectType] filter notifications by subject type
         * @param {string} [since] Only show notifications updated after the given time. This is a timestamp in RFC 3339 format
         * @param {string} [before] Only show notifications updated before the given time. This is a timestamp in RFC 3339 format
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyGetList(all?: boolean, statusTypes?: Array<string>, subjectType?: Array<NotifyGetListSubjectTypeEnum>, since?: string, before?: string, page?: number, limit?: number, options?: any): AxiosPromise<Array<NotificationThread>> {
            return localVarFp.notifyGetList(all, statusTypes, subjectType, since, before, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List users\'s notification threads on a specific repo
         * @param {string} owner owner of the repo
         * @param {string} repo name of the repo
         * @param {boolean} [all] If true, show notifications marked as read. Default value is false
         * @param {Array<string>} [statusTypes] Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned
         * @param {Array<NotifyGetRepoListSubjectTypeEnum>} [subjectType] filter notifications by subject type
         * @param {string} [since] Only show notifications updated after the given time. This is a timestamp in RFC 3339 format
         * @param {string} [before] Only show notifications updated before the given time. This is a timestamp in RFC 3339 format
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyGetRepoList(owner: string, repo: string, all?: boolean, statusTypes?: Array<string>, subjectType?: Array<NotifyGetRepoListSubjectTypeEnum>, since?: string, before?: string, page?: number, limit?: number, options?: any): AxiosPromise<Array<NotificationThread>> {
            return localVarFp.notifyGetRepoList(owner, repo, all, statusTypes, subjectType, since, before, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get notification thread by ID
         * @param {string} id id of notification thread
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyGetThread(id: string, options?: any): AxiosPromise<NotificationThread> {
            return localVarFp.notifyGetThread(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check if unread notifications exist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyNewAvailable(options?: any): AxiosPromise<NotificationCount> {
            return localVarFp.notifyNewAvailable(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark notification threads as read, pinned or unread
         * @param {string} [lastReadAt] Describes the last point that notifications were checked. Anything updated since this time will not be updated.
         * @param {string} [all] If true, mark all notifications on this repo. Default value is false
         * @param {Array<string>} [statusTypes] Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.
         * @param {string} [toStatus] Status to mark notifications as, Defaults to read.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyReadList(lastReadAt?: string, all?: string, statusTypes?: Array<string>, toStatus?: string, options?: any): AxiosPromise<Array<NotificationThread>> {
            return localVarFp.notifyReadList(lastReadAt, all, statusTypes, toStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark notification threads as read, pinned or unread on a specific repo
         * @param {string} owner owner of the repo
         * @param {string} repo name of the repo
         * @param {string} [all] If true, mark all notifications on this repo. Default value is false
         * @param {Array<string>} [statusTypes] Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.
         * @param {string} [toStatus] Status to mark notifications as. Defaults to read.
         * @param {string} [lastReadAt] Describes the last point that notifications were checked. Anything updated since this time will not be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyReadRepoList(owner: string, repo: string, all?: string, statusTypes?: Array<string>, toStatus?: string, lastReadAt?: string, options?: any): AxiosPromise<Array<NotificationThread>> {
            return localVarFp.notifyReadRepoList(owner, repo, all, statusTypes, toStatus, lastReadAt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark notification thread as read by ID
         * @param {string} id id of notification thread
         * @param {string} [toStatus] Status to mark notifications as
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyReadThread(id: string, toStatus?: string, options?: any): AxiosPromise<NotificationThread> {
            return localVarFp.notifyReadThread(id, toStatus, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationApi - interface
 * @export
 * @interface NotificationApi
 */
export interface NotificationApiInterface {
    /**
     * 
     * @summary List users\'s notification threads
     * @param {boolean} [all] If true, show notifications marked as read. Default value is false
     * @param {Array<string>} [statusTypes] Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned.
     * @param {Array<NotifyGetListSubjectTypeEnum>} [subjectType] filter notifications by subject type
     * @param {string} [since] Only show notifications updated after the given time. This is a timestamp in RFC 3339 format
     * @param {string} [before] Only show notifications updated before the given time. This is a timestamp in RFC 3339 format
     * @param {number} [page] page number of results to return (1-based)
     * @param {number} [limit] page size of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notifyGetList(all?: boolean, statusTypes?: Array<string>, subjectType?: Array<NotifyGetListSubjectTypeEnum>, since?: string, before?: string, page?: number, limit?: number, options?: AxiosRequestConfig): AxiosPromise<Array<NotificationThread>>;

    /**
     * 
     * @summary List users\'s notification threads on a specific repo
     * @param {string} owner owner of the repo
     * @param {string} repo name of the repo
     * @param {boolean} [all] If true, show notifications marked as read. Default value is false
     * @param {Array<string>} [statusTypes] Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned
     * @param {Array<NotifyGetRepoListSubjectTypeEnum>} [subjectType] filter notifications by subject type
     * @param {string} [since] Only show notifications updated after the given time. This is a timestamp in RFC 3339 format
     * @param {string} [before] Only show notifications updated before the given time. This is a timestamp in RFC 3339 format
     * @param {number} [page] page number of results to return (1-based)
     * @param {number} [limit] page size of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notifyGetRepoList(owner: string, repo: string, all?: boolean, statusTypes?: Array<string>, subjectType?: Array<NotifyGetRepoListSubjectTypeEnum>, since?: string, before?: string, page?: number, limit?: number, options?: AxiosRequestConfig): AxiosPromise<Array<NotificationThread>>;

    /**
     * 
     * @summary Get notification thread by ID
     * @param {string} id id of notification thread
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notifyGetThread(id: string, options?: AxiosRequestConfig): AxiosPromise<NotificationThread>;

    /**
     * 
     * @summary Check if unread notifications exist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notifyNewAvailable(options?: AxiosRequestConfig): AxiosPromise<NotificationCount>;

    /**
     * 
     * @summary Mark notification threads as read, pinned or unread
     * @param {string} [lastReadAt] Describes the last point that notifications were checked. Anything updated since this time will not be updated.
     * @param {string} [all] If true, mark all notifications on this repo. Default value is false
     * @param {Array<string>} [statusTypes] Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.
     * @param {string} [toStatus] Status to mark notifications as, Defaults to read.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notifyReadList(lastReadAt?: string, all?: string, statusTypes?: Array<string>, toStatus?: string, options?: AxiosRequestConfig): AxiosPromise<Array<NotificationThread>>;

    /**
     * 
     * @summary Mark notification threads as read, pinned or unread on a specific repo
     * @param {string} owner owner of the repo
     * @param {string} repo name of the repo
     * @param {string} [all] If true, mark all notifications on this repo. Default value is false
     * @param {Array<string>} [statusTypes] Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.
     * @param {string} [toStatus] Status to mark notifications as. Defaults to read.
     * @param {string} [lastReadAt] Describes the last point that notifications were checked. Anything updated since this time will not be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notifyReadRepoList(owner: string, repo: string, all?: string, statusTypes?: Array<string>, toStatus?: string, lastReadAt?: string, options?: AxiosRequestConfig): AxiosPromise<Array<NotificationThread>>;

    /**
     * 
     * @summary Mark notification thread as read by ID
     * @param {string} id id of notification thread
     * @param {string} [toStatus] Status to mark notifications as
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notifyReadThread(id: string, toStatus?: string, options?: AxiosRequestConfig): AxiosPromise<NotificationThread>;

}

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI implements NotificationApiInterface {
    /**
     * 
     * @summary List users\'s notification threads
     * @param {boolean} [all] If true, show notifications marked as read. Default value is false
     * @param {Array<string>} [statusTypes] Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned.
     * @param {Array<NotifyGetListSubjectTypeEnum>} [subjectType] filter notifications by subject type
     * @param {string} [since] Only show notifications updated after the given time. This is a timestamp in RFC 3339 format
     * @param {string} [before] Only show notifications updated before the given time. This is a timestamp in RFC 3339 format
     * @param {number} [page] page number of results to return (1-based)
     * @param {number} [limit] page size of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public notifyGetList(all?: boolean, statusTypes?: Array<string>, subjectType?: Array<NotifyGetListSubjectTypeEnum>, since?: string, before?: string, page?: number, limit?: number, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notifyGetList(all, statusTypes, subjectType, since, before, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List users\'s notification threads on a specific repo
     * @param {string} owner owner of the repo
     * @param {string} repo name of the repo
     * @param {boolean} [all] If true, show notifications marked as read. Default value is false
     * @param {Array<string>} [statusTypes] Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned
     * @param {Array<NotifyGetRepoListSubjectTypeEnum>} [subjectType] filter notifications by subject type
     * @param {string} [since] Only show notifications updated after the given time. This is a timestamp in RFC 3339 format
     * @param {string} [before] Only show notifications updated before the given time. This is a timestamp in RFC 3339 format
     * @param {number} [page] page number of results to return (1-based)
     * @param {number} [limit] page size of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public notifyGetRepoList(owner: string, repo: string, all?: boolean, statusTypes?: Array<string>, subjectType?: Array<NotifyGetRepoListSubjectTypeEnum>, since?: string, before?: string, page?: number, limit?: number, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notifyGetRepoList(owner, repo, all, statusTypes, subjectType, since, before, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get notification thread by ID
     * @param {string} id id of notification thread
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public notifyGetThread(id: string, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notifyGetThread(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check if unread notifications exist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public notifyNewAvailable(options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notifyNewAvailable(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mark notification threads as read, pinned or unread
     * @param {string} [lastReadAt] Describes the last point that notifications were checked. Anything updated since this time will not be updated.
     * @param {string} [all] If true, mark all notifications on this repo. Default value is false
     * @param {Array<string>} [statusTypes] Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.
     * @param {string} [toStatus] Status to mark notifications as, Defaults to read.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public notifyReadList(lastReadAt?: string, all?: string, statusTypes?: Array<string>, toStatus?: string, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notifyReadList(lastReadAt, all, statusTypes, toStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mark notification threads as read, pinned or unread on a specific repo
     * @param {string} owner owner of the repo
     * @param {string} repo name of the repo
     * @param {string} [all] If true, mark all notifications on this repo. Default value is false
     * @param {Array<string>} [statusTypes] Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.
     * @param {string} [toStatus] Status to mark notifications as. Defaults to read.
     * @param {string} [lastReadAt] Describes the last point that notifications were checked. Anything updated since this time will not be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public notifyReadRepoList(owner: string, repo: string, all?: string, statusTypes?: Array<string>, toStatus?: string, lastReadAt?: string, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notifyReadRepoList(owner, repo, all, statusTypes, toStatus, lastReadAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mark notification thread as read by ID
     * @param {string} id id of notification thread
     * @param {string} [toStatus] Status to mark notifications as
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public notifyReadThread(id: string, toStatus?: string, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notifyReadThread(id, toStatus, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const NotifyGetListSubjectTypeEnum = {
    Issue: 'issue',
    Pull: 'pull',
    Commit: 'commit',
    Repository: 'repository'
} as const;
export type NotifyGetListSubjectTypeEnum = typeof NotifyGetListSubjectTypeEnum[keyof typeof NotifyGetListSubjectTypeEnum];
/**
 * @export
 */
export const NotifyGetRepoListSubjectTypeEnum = {
    Issue: 'issue',
    Pull: 'pull',
    Commit: 'commit',
    Repository: 'repository'
} as const;
export type NotifyGetRepoListSubjectTypeEnum = typeof NotifyGetRepoListSubjectTypeEnum[keyof typeof NotifyGetRepoListSubjectTypeEnum];
