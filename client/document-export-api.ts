/* tslint:disable */
/* eslint-disable */
/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientErrorResponse } from '../models';
// @ts-ignore
import { CreateDocumentExport } from '../models';
// @ts-ignore
import { DocumentExportId } from '../models';
// @ts-ignore
import { DocumentExportStatus } from '../models';
// @ts-ignore
import { ServerErrorResponse } from '../models';
// @ts-ignore
import { SubscriptionErrorResponse } from '../models';
// @ts-ignore
import { TooManyRequestsResponse } from '../models';
// @ts-ignore
import { ValidationErrorResponse } from '../models';
/**
 * DocumentExportApi - axios parameter creator
 * @export
 */
export const DocumentExportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return with the id of the export.
         * @summary Create document export.
         * @param {CreateDocumentExport} createDocumentExport Create document export body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createDocumentExport: CreateDocumentExport, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createDocumentExport' is not null or undefined
            assertParamExists('create', 'createDocumentExport', createDocumentExport)
            const localVarPath = `/document-export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDocumentExport, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the exported file.
         * @summary Return exported binary file.
         * @param {string} id The ID from create document export endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        download: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('download', 'id', id)
            const localVarPath = `/document-export/{id}/download`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return state of the given export.
         * @summary Retrieve export state.
         * @param {string} id The ID from create document export endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        poll: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('poll', 'id', id)
            const localVarPath = `/document-export/{id}/poll`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentExportApi - functional programming interface
 * @export
 */
export const DocumentExportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentExportApiAxiosParamCreator(configuration)
    return {
        /**
         * Return with the id of the export.
         * @summary Create document export.
         * @param {CreateDocumentExport} createDocumentExport Create document export body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createDocumentExport: CreateDocumentExport, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentExportId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createDocumentExport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return the exported file.
         * @summary Return exported binary file.
         * @param {string} id The ID from create document export endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async download(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.download(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return state of the given export.
         * @summary Retrieve export state.
         * @param {string} id The ID from create document export endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async poll(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentExportStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.poll(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DocumentExportApi - factory interface
 * @export
 */
export const DocumentExportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentExportApiFp(configuration)
    return {
        /**
         * Return with the id of the export.
         * @summary Create document export.
         * @param {CreateDocumentExport} createDocumentExport Create document export body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createDocumentExport: CreateDocumentExport, options?: any): AxiosPromise<DocumentExportId> {
            return localVarFp.create(createDocumentExport, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the exported file.
         * @summary Return exported binary file.
         * @param {string} id The ID from create document export endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        download(id: string, options?: any): AxiosPromise<File> {
            return localVarFp.download(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return state of the given export.
         * @summary Retrieve export state.
         * @param {string} id The ID from create document export endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        poll(id: string, options?: any): AxiosPromise<DocumentExportStatus> {
            return localVarFp.poll(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentExportApi - interface
 * @export
 * @interface DocumentExportApi
 */
export interface DocumentExportApiInterface {
    /**
     * Return with the id of the export.
     * @summary Create document export.
     * @param {CreateDocumentExport} createDocumentExport Create document export body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentExportApiInterface
     */
    create(createDocumentExport: CreateDocumentExport, options?: AxiosRequestConfig): AxiosPromise<DocumentExportId>;

    /**
     * Return the exported file.
     * @summary Return exported binary file.
     * @param {string} id The ID from create document export endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentExportApiInterface
     */
    download(id: string, options?: AxiosRequestConfig): AxiosPromise<File>;

    /**
     * Return state of the given export.
     * @summary Retrieve export state.
     * @param {string} id The ID from create document export endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentExportApiInterface
     */
    poll(id: string, options?: AxiosRequestConfig): AxiosPromise<DocumentExportStatus>;

}

/**
 * DocumentExportApi - object-oriented interface
 * @export
 * @class DocumentExportApi
 * @extends {BaseAPI}
 */
export class DocumentExportApi extends BaseAPI implements DocumentExportApiInterface {
    /**
     * Return with the id of the export.
     * @summary Create document export.
     * @param {CreateDocumentExport} createDocumentExport Create document export body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentExportApi
     */
    public create(createDocumentExport: CreateDocumentExport, options?: AxiosRequestConfig) {
        return DocumentExportApiFp(this.configuration).create(createDocumentExport, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the exported file.
     * @summary Return exported binary file.
     * @param {string} id The ID from create document export endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentExportApi
     */
    public download(id: string, options?: AxiosRequestConfig) {
        return DocumentExportApiFp(this.configuration).download(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return state of the given export.
     * @summary Retrieve export state.
     * @param {string} id The ID from create document export endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentExportApi
     */
    public poll(id: string, options?: AxiosRequestConfig) {
        return DocumentExportApiFp(this.configuration).poll(id, options).then((request) => request(this.axios, this.basePath));
    }
}

