/* tslint:disable */
/* eslint-disable */
/**
 * Forgejo API.
 * This documentation describes the Forgejo API.
 *
 * The version of the OpenAPI document: 1.20.5+0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Package } from '../models';
// @ts-ignore
import { PackageFile } from '../models';
/**
 * PackageApi - axios parameter creator
 * @export
 */
export const PackageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a package
         * @param {string} owner owner of the package
         * @param {string} type type of the package
         * @param {string} name name of the package
         * @param {string} version version of the package
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePackage: async (owner: string, type: string, name: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('deletePackage', 'owner', owner)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('deletePackage', 'type', type)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deletePackage', 'name', name)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('deletePackage', 'version', version)
            const localVarPath = `/packages/{owner}/{type}/{name}/{version}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-FORGEJO-OTP", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a package
         * @param {string} owner owner of the package
         * @param {string} type type of the package
         * @param {string} name name of the package
         * @param {string} version version of the package
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackage: async (owner: string, type: string, name: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('getPackage', 'owner', owner)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getPackage', 'type', type)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getPackage', 'name', name)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getPackage', 'version', version)
            const localVarPath = `/packages/{owner}/{type}/{name}/{version}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-FORGEJO-OTP", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets all files of a package
         * @param {string} owner owner of the package
         * @param {string} type type of the package
         * @param {string} name name of the package
         * @param {string} version version of the package
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackageFiles: async (owner: string, type: string, name: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('listPackageFiles', 'owner', owner)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('listPackageFiles', 'type', type)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('listPackageFiles', 'name', name)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('listPackageFiles', 'version', version)
            const localVarPath = `/packages/{owner}/{type}/{name}/{version}/files`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-FORGEJO-OTP", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets all packages of an owner
         * @param {string} owner owner of the packages
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {ListPackagesTypeEnum} [type] package type filter
         * @param {string} [q] name filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackages: async (owner: string, page?: number, limit?: number, type?: ListPackagesTypeEnum, q?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('listPackages', 'owner', owner)
            const localVarPath = `/packages/{owner}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-FORGEJO-OTP", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PackageApi - functional programming interface
 * @export
 */
export const PackageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PackageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a package
         * @param {string} owner owner of the package
         * @param {string} type type of the package
         * @param {string} name name of the package
         * @param {string} version version of the package
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePackage(owner: string, type: string, name: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePackage(owner, type, name, version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a package
         * @param {string} owner owner of the package
         * @param {string} type type of the package
         * @param {string} name name of the package
         * @param {string} version version of the package
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPackage(owner: string, type: string, name: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Package>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPackage(owner, type, name, version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets all files of a package
         * @param {string} owner owner of the package
         * @param {string} type type of the package
         * @param {string} name name of the package
         * @param {string} version version of the package
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPackageFiles(owner: string, type: string, name: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PackageFile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPackageFiles(owner, type, name, version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets all packages of an owner
         * @param {string} owner owner of the packages
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {ListPackagesTypeEnum} [type] package type filter
         * @param {string} [q] name filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPackages(owner: string, page?: number, limit?: number, type?: ListPackagesTypeEnum, q?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Package>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPackages(owner, page, limit, type, q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PackageApi - factory interface
 * @export
 */
export const PackageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PackageApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a package
         * @param {string} owner owner of the package
         * @param {string} type type of the package
         * @param {string} name name of the package
         * @param {string} version version of the package
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePackage(owner: string, type: string, name: string, version: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePackage(owner, type, name, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a package
         * @param {string} owner owner of the package
         * @param {string} type type of the package
         * @param {string} name name of the package
         * @param {string} version version of the package
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackage(owner: string, type: string, name: string, version: string, options?: any): AxiosPromise<Package> {
            return localVarFp.getPackage(owner, type, name, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets all files of a package
         * @param {string} owner owner of the package
         * @param {string} type type of the package
         * @param {string} name name of the package
         * @param {string} version version of the package
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackageFiles(owner: string, type: string, name: string, version: string, options?: any): AxiosPromise<Array<PackageFile>> {
            return localVarFp.listPackageFiles(owner, type, name, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets all packages of an owner
         * @param {string} owner owner of the packages
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {ListPackagesTypeEnum} [type] package type filter
         * @param {string} [q] name filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackages(owner: string, page?: number, limit?: number, type?: ListPackagesTypeEnum, q?: string, options?: any): AxiosPromise<Array<Package>> {
            return localVarFp.listPackages(owner, page, limit, type, q, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PackageApi - interface
 * @export
 * @interface PackageApi
 */
export interface PackageApiInterface {
    /**
     * 
     * @summary Delete a package
     * @param {string} owner owner of the package
     * @param {string} type type of the package
     * @param {string} name name of the package
     * @param {string} version version of the package
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageApiInterface
     */
    deletePackage(owner: string, type: string, name: string, version: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Gets a package
     * @param {string} owner owner of the package
     * @param {string} type type of the package
     * @param {string} name name of the package
     * @param {string} version version of the package
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageApiInterface
     */
    getPackage(owner: string, type: string, name: string, version: string, options?: AxiosRequestConfig): AxiosPromise<Package>;

    /**
     * 
     * @summary Gets all files of a package
     * @param {string} owner owner of the package
     * @param {string} type type of the package
     * @param {string} name name of the package
     * @param {string} version version of the package
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageApiInterface
     */
    listPackageFiles(owner: string, type: string, name: string, version: string, options?: AxiosRequestConfig): AxiosPromise<Array<PackageFile>>;

    /**
     * 
     * @summary Gets all packages of an owner
     * @param {string} owner owner of the packages
     * @param {number} [page] page number of results to return (1-based)
     * @param {number} [limit] page size of results
     * @param {ListPackagesTypeEnum} [type] package type filter
     * @param {string} [q] name filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageApiInterface
     */
    listPackages(owner: string, page?: number, limit?: number, type?: ListPackagesTypeEnum, q?: string, options?: AxiosRequestConfig): AxiosPromise<Array<Package>>;

}

/**
 * PackageApi - object-oriented interface
 * @export
 * @class PackageApi
 * @extends {BaseAPI}
 */
export class PackageApi extends BaseAPI implements PackageApiInterface {
    /**
     * 
     * @summary Delete a package
     * @param {string} owner owner of the package
     * @param {string} type type of the package
     * @param {string} name name of the package
     * @param {string} version version of the package
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageApi
     */
    public deletePackage(owner: string, type: string, name: string, version: string, options?: AxiosRequestConfig) {
        return PackageApiFp(this.configuration).deletePackage(owner, type, name, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a package
     * @param {string} owner owner of the package
     * @param {string} type type of the package
     * @param {string} name name of the package
     * @param {string} version version of the package
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageApi
     */
    public getPackage(owner: string, type: string, name: string, version: string, options?: AxiosRequestConfig) {
        return PackageApiFp(this.configuration).getPackage(owner, type, name, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets all files of a package
     * @param {string} owner owner of the package
     * @param {string} type type of the package
     * @param {string} name name of the package
     * @param {string} version version of the package
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageApi
     */
    public listPackageFiles(owner: string, type: string, name: string, version: string, options?: AxiosRequestConfig) {
        return PackageApiFp(this.configuration).listPackageFiles(owner, type, name, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets all packages of an owner
     * @param {string} owner owner of the packages
     * @param {number} [page] page number of results to return (1-based)
     * @param {number} [limit] page size of results
     * @param {ListPackagesTypeEnum} [type] package type filter
     * @param {string} [q] name filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageApi
     */
    public listPackages(owner: string, page?: number, limit?: number, type?: ListPackagesTypeEnum, q?: string, options?: AxiosRequestConfig) {
        return PackageApiFp(this.configuration).listPackages(owner, page, limit, type, q, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListPackagesTypeEnum = {
    Alpine: 'alpine',
    Cargo: 'cargo',
    Chef: 'chef',
    Composer: 'composer',
    Conan: 'conan',
    Conda: 'conda',
    Container: 'container',
    Cran: 'cran',
    Debian: 'debian',
    Generic: 'generic',
    Go: 'go',
    Helm: 'helm',
    Maven: 'maven',
    Npm: 'npm',
    Nuget: 'nuget',
    Pub: 'pub',
    Pypi: 'pypi',
    Rpm: 'rpm',
    Rubygems: 'rubygems',
    Swift: 'swift',
    Vagrant: 'vagrant'
} as const;
export type ListPackagesTypeEnum = typeof ListPackagesTypeEnum[keyof typeof ListPackagesTypeEnum];
