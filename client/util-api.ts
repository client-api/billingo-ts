/* tslint:disable */
/* eslint-disable */
/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientErrorResponse } from '../models';
// @ts-ignore
import { Id } from '../models';
// @ts-ignore
import { ServerErrorResponse } from '../models';
// @ts-ignore
import { ServerTime } from '../models';
// @ts-ignore
import { SubscriptionErrorResponse } from '../models';
// @ts-ignore
import { TaxNumber } from '../models';
// @ts-ignore
import { TooManyRequestsResponse } from '../models';
// @ts-ignore
import { ValidationErrorResponse } from '../models';
/**
 * UtilApi - axios parameter creator
 * @export
 */
export const UtilApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check the given tax number format, and NAV validate.
         * @summary Check tax number.
         * @param {string} taxNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkTaxNumber: async (taxNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taxNumber' is not null or undefined
            assertParamExists('checkTaxNumber', 'taxNumber', taxNumber)
            const localVarPath = `/utils/check-tax-number/{tax_number}`
                .replace(`{${"tax_number"}}`, encodeURIComponent(String(taxNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the API v3 ID.
         * @summary Convert legacy ID to v3 ID.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getId', 'id', id)
            const localVarPath = `/utils/convert-legacy-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the server time.
         * @summary Get the server time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerTime: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/utils/time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilApi - functional programming interface
 * @export
 */
export const UtilApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UtilApiAxiosParamCreator(configuration)
    return {
        /**
         * Check the given tax number format, and NAV validate.
         * @summary Check tax number.
         * @param {string} taxNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkTaxNumber(taxNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxNumber>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkTaxNumber(taxNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the API v3 ID.
         * @summary Convert legacy ID to v3 ID.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Id>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return the server time.
         * @summary Get the server time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServerTime(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServerTime>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServerTime(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UtilApi - factory interface
 * @export
 */
export const UtilApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UtilApiFp(configuration)
    return {
        /**
         * Check the given tax number format, and NAV validate.
         * @summary Check tax number.
         * @param {string} taxNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkTaxNumber(taxNumber: string, options?: any): AxiosPromise<TaxNumber> {
            return localVarFp.checkTaxNumber(taxNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the API v3 ID.
         * @summary Convert legacy ID to v3 ID.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getId(id: number, options?: any): AxiosPromise<Id> {
            return localVarFp.getId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the server time.
         * @summary Get the server time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerTime(options?: any): AxiosPromise<ServerTime> {
            return localVarFp.getServerTime(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UtilApi - interface
 * @export
 * @interface UtilApi
 */
export interface UtilApiInterface {
    /**
     * Check the given tax number format, and NAV validate.
     * @summary Check tax number.
     * @param {string} taxNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilApiInterface
     */
    checkTaxNumber(taxNumber: string, options?: AxiosRequestConfig): AxiosPromise<TaxNumber>;

    /**
     * Retrieves the API v3 ID.
     * @summary Convert legacy ID to v3 ID.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilApiInterface
     */
    getId(id: number, options?: AxiosRequestConfig): AxiosPromise<Id>;

    /**
     * Return the server time.
     * @summary Get the server time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilApiInterface
     */
    getServerTime(options?: AxiosRequestConfig): AxiosPromise<ServerTime>;

}

/**
 * UtilApi - object-oriented interface
 * @export
 * @class UtilApi
 * @extends {BaseAPI}
 */
export class UtilApi extends BaseAPI implements UtilApiInterface {
    /**
     * Check the given tax number format, and NAV validate.
     * @summary Check tax number.
     * @param {string} taxNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilApi
     */
    public checkTaxNumber(taxNumber: string, options?: AxiosRequestConfig) {
        return UtilApiFp(this.configuration).checkTaxNumber(taxNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the API v3 ID.
     * @summary Convert legacy ID to v3 ID.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilApi
     */
    public getId(id: number, options?: AxiosRequestConfig) {
        return UtilApiFp(this.configuration).getId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the server time.
     * @summary Get the server time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilApi
     */
    public getServerTime(options?: AxiosRequestConfig) {
        return UtilApiFp(this.configuration).getServerTime(options).then((request) => request(this.axios, this.basePath));
    }
}

